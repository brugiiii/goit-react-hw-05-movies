{"version":3,"file":"static/js/102.371b34f5.chunk.js","mappings":"sOAEMA,EAAM,mCACNC,EAAW,gCAEJC,EAAb,WACE,cAAe,eACbC,KAAKC,OAAS,GACdD,KAAKE,SAAW,IACjB,CAJH,uEAME,WAAYC,GAAZ,4EAGUA,EAHV,OAIS,aAJT,OAUS,YAVT,OAgBS,YAhBT,QAsBS,YAtBT,QA4BS,YA5BT,yCAKkBC,EAAAA,EAAAA,GAAM,GAAD,OACZN,EADY,sCAC0BD,EAD1B,oBALvB,6BA6BMQ,EA7BN,oDAWkBD,EAAAA,EAAAA,GAAM,GAAD,OACZN,EADY,gCACoBD,EADpB,kBACiCG,KAAKC,OADtC,+CAXvB,0BAiBkBG,EAAAA,EAAAA,GAAM,GAAD,OACZN,EADY,iBACKE,KAAKE,SADV,oBAC8BL,EAD9B,oBAjBvB,eAiBMQ,EAjBN,yBAoBaA,EAAIC,MApBjB,0BAuBkBF,EAAAA,EAAAA,GAAM,GAAD,OACZN,EADY,iBACKE,KAAKE,SADV,4BACsCL,EADtC,oBAvBvB,eAuBMQ,EAvBN,yBA0BaA,EAAIC,KAAKC,MA1BtB,0BA6BkBH,EAAAA,EAAAA,GAAM,GAAD,OACZN,EADY,iBACKE,KAAKE,SADV,4BACsCL,EADtC,2BA7BvB,mEAsCSQ,EAAIC,KAAKE,SAtClB,iDANF,wEA+CE,WACE,OAAOR,KAAKC,MACb,EAjDH,IAmDE,SAAUQ,GACRT,KAAKC,OAASQ,CACf,GArDH,mBAuDE,WACE,OAAOT,KAAKE,QACb,EAzDH,IA2DE,SAAYQ,GACVV,KAAKE,SAAWQ,CACjB,KA7DH,I,mJCHaC,EAAQC,EAAAA,EAAAA,MAAH,qGAOLC,EAAOD,EAAAA,EAAAA,KAAH,yCAIJE,EAASF,EAAAA,EAAAA,OAAH,kG,mBCDbG,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAElBC,EAAM,IAAIlB,EAAAA,EAoDhB,EAlDe,WACb,OAA4BmB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACHF,EAAaG,IAAI,WAItBV,EAAII,MAAQG,EAAaG,IAAI,SAC7BV,EAAIW,MAAM,WAAWC,MAAK,SAAAvB,GACxB,GAAoB,IAAhBA,EAAKwB,OACP,OAAOC,EAAAA,GAAAA,MACL,oBACA,cACA,KAGJX,EAAUd,EACX,IACF,GAAE,CAACkB,IAeJ,OACE,iCACE,UAACX,EAAD,CAAMmB,SAfW,SAAAC,GAGnB,GAFAA,EAAEC,kBAEGb,EACH,OAAOU,EAAAA,GAAAA,MAA0B,kBAAmB,cAAe,KAGrEN,EAAgB,CAAEJ,MAAAA,IAClBC,EAAS,GACV,EAMG,WACE,SAACX,EAAD,CAAOwB,SALQ,SAAAF,GAAC,OAAIX,EAASW,EAAEG,OAAOC,MAAtB,EAKeA,MAAOhB,KACtC,SAACP,EAAD,CAAQX,KAAK,SAAb,SAAsB,cAGL,IAAlBgB,EAAOW,SAAgB,SAACf,EAAD,CAAYI,OAAQA,KAE5C,SAAC,KAAD,MAGL,C","sources":["Api.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '83584156b00a2d23d72a1dbc78073946';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport class Api {\n  constructor() {\n    this._query = '';\n    this._movieId = null;\n  }\n\n  async fetch(type) {\n    let res;\n\n    switch (type) {\n      case 'trending':\n        res = await axios(\n          `${BASE_URL}trending/movie/day?api_key=${KEY}&language=en-US`\n        );\n        break;\n\n      case 'byQuery':\n        res = await axios(\n          `${BASE_URL}search/movie?api_key=${KEY}&query=${this._query}&include_adult=false&language=en-US&page=1`\n        );\n        break;\n\n      case 'details':\n        res = await axios(\n          `${BASE_URL}movie/${this._movieId}?api_key=${KEY}&language=en-US`\n        );\n        return res.data;\n\n      case 'credits':\n        res = await axios(\n          `${BASE_URL}movie/${this._movieId}/credits?api_key=${KEY}&language=en-US`\n        );\n        return res.data.cast;\n\n      case 'reviews':\n        res = await axios(\n          `${BASE_URL}movie/${this._movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n        );\n        break;\n\n      default:\n        return;\n    }\n\n    return res.data.results;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  set query(newQuery) {\n    this._query = newQuery;\n  }\n\n  get movieId() {\n    return this._movieId;\n  }\n\n  set movieId(id) {\n    this._movieId = id;\n  }\n}\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n  border-radius: 8px;\n  font-size: 20px;\n`;\n\nexport const Form = styled.form`\n  margin: 10px;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  height: 30px;\n  width: 70px;\n  margin-left: 5px;\n`;\n","import { useState, useEffect, lazy } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nimport { Input, Form, Button } from './Movies.styled';\n\nimport { Api } from '../../Api';\n\nconst MoviesList = lazy(() => import('../../components/MoviesList'));\n\nconst api = new Api();\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (!searchParams.get('query')) {\n      return;\n    }\n\n    api.query = searchParams.get('query');\n    api.fetch('byQuery').then(data => {\n      if (data.length === 0) {\n        return NotificationManager.error(\n          'Enter valid query',\n          'Error query',\n          3000\n        );\n      }\n      setMovies(data);\n    });\n  }, [searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!query) {\n      return NotificationManager.error('Enter something', 'Error query', 3000);\n    }\n\n    setSearchParams({ query });\n    setQuery('');\n  };\n\n  const handleChange = e => setQuery(e.target.value);\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Input onChange={handleChange} value={query} />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n\n      {movies.length !== 0 && <MoviesList movies={movies} />}\n\n      <NotificationContainer />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY","BASE_URL","Api","this","_query","_movieId","type","axios","res","data","cast","results","newQuery","id","Input","styled","Form","Button","MoviesList","lazy","api","useState","movies","setMovies","query","setQuery","useSearchParams","searchParams","setSearchParams","useEffect","get","fetch","then","length","NotificationManager","onSubmit","e","preventDefault","onChange","target","value"],"sourceRoot":""}